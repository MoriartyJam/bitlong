
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { toast } from "sonner";
import { Save } from "lucide-react";

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Employee } from "@/types";
import { addEmployee, updateEmployee, generateEmployeeNumber, addEmployeeToSupabase } from "@/utils/employeeUtils";
import { useLanguage } from "@/contexts/LanguageContext";

// Form schema validation
const formSchema = z.object({
  name: z.string().min(2, { message: "Name must be at least 2 characters" }),
  employeeNumber: z.string().min(1, { message: "Employee number is required" }),
  email: z.string().email({ message: "Invalid email address" }),
  mobile: z.string().min(10, { message: "Mobile number must be at least 10 digits" }),
  phone: z.string().optional(),
  address: z.string().min(5, { message: "Address must be at least 5 characters" }),
  notes: z.string().optional(),
});

type FormData = z.infer<typeof formSchema>;

interface EmployeeFormProps {
    onSuccess?: () => void;
}

const EmployeeForm = ({ employee, onSuccess }: EmployeeFormProps) => {
  const navigate = useNavigate();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { t } = useLanguage();
  
  // Initialize form with default values or existing employee data
  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: employee ? {
      name: employee.name,
      employeeNumber: employee.employeeNumber,
      email: employee.email,
      mobile: employee.mobile,
      phone: employee.phone || "",
      address: employee.address,
      notes: employee.notes || "",
    } : {
      name: "",
      employeeNumber: generateEmployeeNumber(),
      email: "",
      mobile: "",
      phone: "",
      address: "",
      notes: "",
    },
  });


const onSubmit = async (values: EmployeeFormValues) => {
  try {
    const added = await addEmployeeToSupabase({
      name: values.name,
      phone: values.phone,
      email: values.email,
    });

    if (added) {
      // ✅ Сохраняем в localStorage
      addEmployee(added);

      toast.success(t("employeeForm.success.add"));

      // ✅ Вызываем onSuccess, если передан
      if (onSuccess) {
        onSuccess();
      } else {
        navigate("/employees");
      }
    } else {
      toast.error(t("employeeForm.error"));
    }
  } catch (err) {
    console.error("Ошибка при добавлении сотрудника:", err);
    toast.error(t("employeeForm.error"));
  }
};


  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <FormField
            control={form.control}
            name="name"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t('employees.name')}</FormLabel>
                <FormControl>
                  <Input placeholder={t('employees.enterName')} {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          
          <FormField
            control={form.control}
            name="employeeNumber"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t('employees.employeeNumber')}</FormLabel>
                <FormControl>
                  <Input 
                    placeholder={t('employees.autoGenerated')} 
                    {...field} 
                    readOnly={!employee} 
                    className={!employee ? "bg-muted" : ""}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          
          <FormField
            control={form.control}
            name="email"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t('employees.email')}</FormLabel>
                <FormControl>
                  <Input placeholder={t('employees.enterEmail')} type="email" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          
          <FormField
            control={form.control}
            name="mobile"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t('employees.mobile')}</FormLabel>
                <FormControl>
                  <Input placeholder={t('employees.enterMobile')} type="tel" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          
          <FormField
            control={form.control}
            name="phone"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t('employees.phoneOptional')}</FormLabel>
                <FormControl>
                  <Input placeholder={t('employees.enterPhone')} type="tel" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          
          <FormField
            control={form.control}
            name="address"
            render={({ field }) => (
              <FormItem>
                <FormLabel>{t('employees.address')}</FormLabel>
                <FormControl>
                  <Input placeholder={t('employees.enterAddress')} {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        
        <FormField
          control={form.control}
          name="notes"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t('employees.notesOptional')}</FormLabel>
              <FormControl>
                <Textarea 
                  placeholder={t('employees.enterNotes')} 
                  className="min-h-[120px]" 
                  {...field} 
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        
        <div className="flex justify-end">
          <Button
            type="submit"
            className="rounded-full w-14 h-14 fixed bottom-6 right-6 shadow-lg"
            disabled={isSubmitting}
          >
            <Save className="h-6 w-6" />
          </Button>
        </div>
      </form>
    </Form>
  );
};

export default EmployeeForm;
